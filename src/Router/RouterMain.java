/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Router;

import Chats.chat_client;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author VanPhu
 */
public class RouterMain extends javax.swing.JFrame {

    /**
     * Creates new form RouterMain
     */
    private static Map<Integer, Integer> router = new HashMap<>();
    private static Map<String, Integer> address = new HashMap<>();
    private static DataOutputStream dos = null;
    private static DataInputStream dis = null;
    private static Socket s = null;
    private static String result = "";
    public static int Status;
    public static String sendin = "";
    public static int PORT = 1201;

    public RouterMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_getip = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btn_monitor = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        btn_send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_getip.setText("Get IP");
        btn_getip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getipActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
        jPanel2.setForeground(new java.awt.Color(255, 0, 51));

        btn_monitor.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btn_monitor.setText("Monitor");
        btn_monitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_monitorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_monitor)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(btn_monitor)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 51)));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("Vị Trí Gửi :");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Vị Trí Nhận :");
        jLabel2.setToolTipText("");

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D" }));

        jComboBox2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D" }));

        btn_send.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        btn_send.setText("Send");
        btn_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(110, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_send)
                .addGap(83, 83, 83))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(btn_send)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btn_getip))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addComponent(btn_getip)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_getipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getipActionPerformed
        try {
            // TODO add your handling code here:
//            InetAddress ip = InetAddress.getLocalHost();
//            JOptionPane.showMessageDialog(null, ip.getHostAddress());
            Enumeration e = NetworkInterface.getNetworkInterfaces();
            while (e.hasMoreElements()) {
                NetworkInterface n = (NetworkInterface) e.nextElement();
                Enumeration ee = n.getInetAddresses();
                while (ee.hasMoreElements()) {
                    InetAddress ip = (InetAddress) ee.nextElement();
                    JOptionPane.showMessageDialog(null, ip.getHostAddress());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(RouterMain.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btn_getipActionPerformed

    private void btn_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendActionPerformed
        try {
            // TODO add your handling code here:
            builmap();
            sendin = jComboBox1.getSelectedItem().toString();
            String sendout = jComboBox2.getSelectedItem().toString();
            if (sendin.equals(sendout)) {
                JOptionPane.showMessageDialog(null, "Khong Trung Router");
            } else {
                switch (sendin) {
                    case "A":
                        sendA(sendout);
                        break;
                    case "B":
                        sendB(sendout);
                        break;
                    case "C":
                        sendC(sendout);
                        break;
                    case "D":
                        sendD(sendout);
                        break;
                }
            }
            try {
                s = new Socket("localhost", 1205);
                dos = new DataOutputStream(s.getOutputStream());
                dos.writeUTF(result);
            } catch (UnknownHostException e) {
                System.out.println(e);
                e.printStackTrace();
            } catch (IOException e) {
                System.out.println(e);
                e.printStackTrace();
            }

        } catch (IOException ex) {
            System.out.println(ex);
            Logger.getLogger(RouterMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_sendActionPerformed

    private void btn_monitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_monitorActionPerformed
        // TODO add your handling code here:
        new Minitor().setVisible(true);
    }//GEN-LAST:event_btn_monitorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RouterMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RouterMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RouterMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RouterMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RouterMain().setVisible(true);
            }
        });

    }

    private static void builmap() {
        address.put("A", 1201);
        address.put("D", 1202);
        address.put("C", 1204);
        address.put("B", 1203);
    }

    public static void sendAB(String recieve) throws IOException {
        s = new Socket("localhost", 1201);
        dis = new DataInputStream(s.getInputStream());
        dos = new DataOutputStream(s.getOutputStream());
        dos.writeUTF("A - ");
        result = dis.readUTF();
        if (recieve.equals("B")) {
            s = new Socket("localhost", address.get("B"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - B";
        }
        if (recieve.equals("C")) {
            s = new Socket("localhost", address.get("C"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - C";
        }
    }

    private static void sendA(String recieve) throws UnknownHostException, IOException {
        s = new Socket("localhost", 1201);
        dis = new DataInputStream(s.getInputStream());
        dos = new DataOutputStream(s.getOutputStream());
        dos.writeUTF("A - ");
        result = dis.readUTF();
        if (recieve.equals("C")) {
            s = new Socket("localhost", address.get("C"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - C";
        }

        if (recieve.equals("D")) {
            s = new Socket("localhost", address.get("D"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - D";
        }
        if (recieve.equals("B")) {
            s = new Socket("localhost", address.get("D"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF();

            s = new Socket("localhost", address.get("B"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");

            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - B";
        }

    }

    private static void sendC(String recieve) throws UnknownHostException, IOException {
        s = new Socket("localhost", address.get("C"));
        dis = new DataInputStream(s.getInputStream());
        dos = new DataOutputStream(s.getOutputStream());
        dos.writeUTF("C - ");
        result = dis.readUTF();
        if (recieve.equals("A")) {
            s = new Socket("localhost", address.get("A"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - A";
        }

        if (recieve.equals("D")) {
            s = new Socket("localhost", address.get("A"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF();

            s = new Socket("localhost", address.get("D"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");

            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - D";
        }

        if (recieve.equals("B")) {
            s = new Socket("localhost", address.get("A"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF();

            s = new Socket("localhost", address.get("D"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF();

            s = new Socket("localhost", address.get("B"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");

            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - B";
        }

    }

    private static void sendD(String recieve) throws UnknownHostException, IOException {
        s = new Socket("localhost", address.get("D"));
        dis = new DataInputStream(s.getInputStream());
        dos = new DataOutputStream(s.getOutputStream());
        dos.writeUTF("D - ");
        result = dis.readUTF();
        if (recieve.equals("A")) {
            s = new Socket("localhost", address.get("A"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - A";
        }

        if (recieve.equals("C")) {
            s = new Socket("localhost", address.get("A"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF();

            s = new Socket("localhost", address.get("C"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");

            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - C";
        }

        if (recieve.equals("B")) {
            s = new Socket("localhost", address.get("B"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - B";
        }
    }

    private static void sendB(String recieve) throws UnknownHostException, IOException {
        s = new Socket("localhost", address.get("B"));
        dis = new DataInputStream(s.getInputStream());
        dos = new DataOutputStream(s.getOutputStream());
        dos.writeUTF("B - ");
        result = dis.readUTF();
        if (recieve.equals("D")) {
            s = new Socket("localhost", address.get("D"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - D";
        }

        if (recieve.equals("A")) {
            s = new Socket("localhost", address.get("D"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF();

            s = new Socket("localhost", address.get("A"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");

            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - A";
        }

        if (recieve.equals("C")) {
            s = new Socket("localhost", address.get("D"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF();

            s = new Socket("localhost", address.get("A"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");
            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF();

            s = new Socket("localhost", address.get("C"));
            dos = new DataOutputStream(s.getOutputStream());
            dos.writeUTF(result + " - ");

            dis = new DataInputStream(s.getInputStream());
            result = dis.readUTF() + " - C";
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_getip;
    private javax.swing.JButton btn_monitor;
    private javax.swing.JButton btn_send;
    private static javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
